// Code generated by protoc-gen-cobra. DO NOT EDIT.

package pactus

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func UtilClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("Util"),
		Short: "Util service client",
		Long:  "Util service defines various RPC methods for interacting with\n Utils.",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_UtilSignMessageWithPrivateKeyCommand(cfg),
		_UtilVerifyMessageCommand(cfg),
	)
	return cmd
}

func _UtilSignMessageWithPrivateKeyCommand(cfg *client.Config) *cobra.Command {
	req := &SignMessageWithPrivateKeyRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("SignMessageWithPrivateKey"),
		Short: "SignMessageWithPrivateKey RPC client",
		Long:  "SignMessageWithPrivateKey",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Util"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Util", "SignMessageWithPrivateKey"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilClient(cc)
				v := &SignMessageWithPrivateKeyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.SignMessageWithPrivateKey(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Message, cfg.FlagNamer("Message"), "", "The unique ID of the transaction to retrieve.")
	cmd.PersistentFlags().StringVar(&req.PrivateKey, cfg.FlagNamer("PrivateKey"), "", "The verbosity level for transaction details.")

	return cmd
}

func _UtilVerifyMessageCommand(cfg *client.Config) *cobra.Command {
	req := &VerifyMessageRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("VerifyMessage"),
		Short: "VerifyMessage RPC client",
		Long:  "VerifyMessage",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Util"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Util", "VerifyMessage"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilClient(cc)
				v := &VerifyMessageRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.VerifyMessage(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Message, cfg.FlagNamer("Message"), "", "The unique ID of the transaction to retrieve.")
	cmd.PersistentFlags().StringVar(&req.Signature, cfg.FlagNamer("Signature"), "", "The verbosity level for transaction details.")
	cmd.PersistentFlags().StringVar(&req.PublicKey, cfg.FlagNamer("PublicKey"), "", "The verbosity level for transaction details.")

	return cmd
}
